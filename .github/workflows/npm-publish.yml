name: Publish Package

on:
  release:
    types:
      - released
  workflow_dispatch:

env:
  NODE_VERSION: 14

jobs:
  prepare:
    name: Prepare the source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Create tarball
        run: npm pack

      - name: Save tarball
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: "*.tgz"
          retention-days: 1

  publish:
    name: Publish package
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Set commit status to PENDING
        uses: myrotvorets/set-commit-status-action@1.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          context: Publish to npm
          sha: ${{ github.sha }}

      - name: Set up Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          registry-url: https://registry.npmjs.org/

      - name: Download tarball
        uses: actions/download-artifact@v2
        with:
          name: package

      - name: Publish package
        run: npm publish *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@1.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          context: Publish to ${{ matrix.registry }}
          sha: ${{ github.sha }}
        if: always()
